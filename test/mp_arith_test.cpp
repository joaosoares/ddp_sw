#include "CppUTest/TestHarness.h"
#include "../mp_arith.h"

void customprint(uint32_t *a, int size)
{
  int i;
  for (i = 0; i < size; i++)
  {
    printf("%08x", a[size - i - 1]);
  }
  printf("\n\r");
}

TEST_GROUP(MpArithTestGroup) {

};

TEST(MpArithTestGroup, MpAddTest) {
  uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
  uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
  uint32_t res[33];
  uint32_t expected[32] = {0xf336a23b, 0x33ff8dde, 0xe90396cb, 0x609d8962, 0xe58de663, 0x0f5b01ec, 0xc92ba364, 0xad583d3a, 0xaa2df3b8, 0x2f987017, 0xe386e7fa, 0xd02a8cd6, 0xe18e23f1, 0x9f9282ca, 0x0e07e0ca, 0xd71e7272, 0xe4b5c404, 0xc2d65673, 0xec7bc28d, 0x6734863d, 0x5cf248af, 0x9debc8dd, 0x62f4397f, 0x0ccc3d47, 0xde2bcba4, 0x021f280c, 0x69008e51, 0xcac2e96d, 0x5eb3b4aa, 0x0be99e20, 0x4a4e6cf9, 0xc999406b};
  

  // init_performance_counters(1);
  // uint32_t start_time = get_cycle_counter();
  // Mp addition
  mp_add(a, b, res, 32);
  int i;
  for (i = 0; i < 32; i++) {
    CHECK_EQUAL(expected[i], res[i]);
  }
}


TEST(MpArithTestGroup, MpSubTest) {
  uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
  uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
  uint32_t res[32];
  uint32_t expected[32] = {0xf5d32e53, 0x61c51604, 0xf2f12c2f, 0x50b94e86, 0xa7f0aa2d, 0xdd9d1ed5, 0x46f7df91, 0x01c77ef2, 0xe84fd772, 0x0dc7196e, 0xa65b4c62, 0x49436a78, 0x0309e357, 0xbd45b8b0, 0xa1cfa7af, 0xa5bf524e, 0x9c5dbc9b, 0x1d9a4592, 0xfa342bcc, 0xa824e672, 0xa052496d, 0x24215947, 0x22d3b7f3, 0x3022dc97, 0xdb9323eb, 0x1f5aa02b, 0xb942ef87, 0xb0a84afe, 0x27d88cdf, 0x8176c33d, 0x87aa4570, 0xfda8012c};

  // init_performance_counters(1);
  // uint32_t start_time = get_cycle_counter();
  // Mp addition
  mp_sub(a, b, res, 32);
  int i;
  for (i = 0; i < 32; i++) {
    CHECK_EQUAL(expected[i], res[i]);
  }
}

TEST(MpArithTestGroup, ModAddTest) {
  uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
  uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
  uint32_t N[32] = {0x4aeeb107, 0x5d78aa98, 0x6c55dd05, 0x6f5326c9, 0xf93f738c, 0xc10fa093, 0x20478120, 0x099d6d70, 0x833d9b82, 0x1248f3ed, 0xa43ed737, 0xc1c1da45, 0x9f23e5c7, 0xb17c3598, 0xe8938df6, 0x7ae59036, 0x9f84d87b, 0xc8710dc6, 0x249ee0f8, 0x46eeae2f, 0x66a3bb9b, 0xfeef4c6b, 0xc7b55eae, 0x7951dd0c, 0x0b4391e8, 0x141ad586, 0x1a568588, 0x908293dd, 0x472c0bea, 0x8d00abfe, 0xed17377f, 0x83a01efe};
  uint32_t res[33];
  uint32_t expected[32] = {0xa847f134, 0xd686e346, 0x7cadb9c5, 0xf14a6299, 0xec4e72d6, 0x4e4b6158, 0xa8e42243, 0xa3bacfca, 0x26f05836, 0x1d4f7c2a, 0x3f4810c3, 0x0e68b291, 0x426a3e2a, 0xee164d32, 0x257452d3, 0x5c38e23b, 0x4530eb89, 0xfa6548ad, 0xc7dce194, 0x2045d80e, 0xf64e8d14, 0x9efc7c71, 0x9b3edad0, 0x937a603a, 0xd2e839bb, 0xee045286, 0x4eaa08c8, 0x3a405590, 0x1787a8c0, 0x7ee8f222, 0x5d373579, 0x45f9216c};

  // init_performance_counters(1);
  // uint32_t start_time = get_cycle_counter();
  // Mp addition
  mod_add(a, b, N, res, 32);
  customprint(res, 32);
  int i;
  for (i = 0; i < 32; i++) {
    CHECK_EQUAL(expected[i], res[i]);
  }
}

TEST(MpArithTestGroup, ModSubTest) {
  uint32_t a[32] = {0xf484e847, 0x4ae251f1, 0xedfa617d, 0x58ab6bf4, 0x46bf4848, 0xf67c1061, 0x8811c17a, 0x578fde16, 0x493ee595, 0x1eafc4c3, 0xc4f11a2e, 0x8cb6fba7, 0x724c03a4, 0x2e6c1dbd, 0x57ebc43d, 0x3e6ee260, 0x4089c050, 0xf0384e03, 0x7357f72c, 0x87acb658, 0x7ea2490e, 0x61069112, 0x42e3f8b9, 0x9e778cef, 0x5cdf77c7, 0x10bce41c, 0x1121beec, 0x3db59a36, 0xc34620c5, 0xc6b030ae, 0xe8fc5934, 0x63a0a0cb};
  uint32_t b[32] = {0xfeb1b9f4, 0xe91d3bec, 0xfb09354d, 0x07f21d6d, 0x9ece9e1b, 0x18def18b, 0x4119e1e9, 0x55c85f24, 0x60ef0e23, 0x10e8ab54, 0x1e95cdcc, 0x4373912f, 0x6f42204d, 0x7126650d, 0xb61c1c8d, 0x98af9011, 0xa42c03b4, 0xd29e0870, 0x7923cb60, 0xdf87cfe5, 0xde4fffa0, 0x3ce537ca, 0x201040c6, 0x6e54b058, 0x814c53dc, 0xf16243f0, 0x57decf64, 0x8d0d4f37, 0x9b6d93e5, 0x45396d71, 0x615213c4, 0x65f89f9f};
  uint32_t N[32] = {0x4aeeb107, 0x5d78aa98, 0x6c55dd05, 0x6f5326c9, 0xf93f738c, 0xc10fa093, 0x20478120, 0x099d6d70, 0x833d9b82, 0x1248f3ed, 0xa43ed737, 0xc1c1da45, 0x9f23e5c7, 0xb17c3598, 0xe8938df6, 0x7ae59036, 0x9f84d87b, 0xc8710dc6, 0x249ee0f8, 0x46eeae2f, 0x66a3bb9b, 0xfeef4c6b, 0xc7b55eae, 0x7951dd0c, 0x0b4391e8, 0x141ad586, 0x1a568588, 0x908293dd, 0x472c0bea, 0x8d00abfe, 0xed17377f, 0x83a01efe};
  uint32_t res[32];
  uint32_t expected[32] = {0x40c1df5a, 0xbf3dc09d, 0x5f470934, 0xc00c7550, 0xa1301db9, 0x9eacbf69, 0x673f60b2, 0x0b64ec62, 0x6b8d72f4, 0x20100d5c, 0x4a9a2399, 0x0b0544be, 0xa22dc91f, 0x6ec1ee48, 0x8a6335a6, 0x20a4e285, 0x3be29517, 0xe60b5359, 0x1ed30cc4, 0xef1394a2, 0x06f60508, 0x2310a5b3, 0xea8916a2, 0xa974b9a3, 0xe6d6b5d3, 0x337575b1, 0xd399750f, 0x412adedb, 0x6f0498ca, 0x0e776f3b, 0x74c17cf0, 0x8148202b};

  // init_performance_counters(1);
  // uint32_t start_time = get_cycle_counter();
  // Mp addition
  mod_sub(a, b, N, res, 32);
  int i;
  for (i = 0; i < 32; i++) {
    CHECK_EQUAL(expected[i], res[i]);
  }
}

